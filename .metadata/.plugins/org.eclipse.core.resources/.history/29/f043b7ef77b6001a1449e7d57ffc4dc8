package com.example.demo.controller;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.cloud.aws.messaging.core.QueueMessagingTemplate;
import org.springframework.cloud.aws.messaging.listener.annotation.SqsListener;
import org.springframework.http.ResponseEntity;
import org.springframework.messaging.support.MessageBuilder;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;

import com.amazonaws.services.sqs.AmazonSQS;
import com.amazonaws.services.sqs.AmazonSQSClientBuilder;
import com.amazonaws.services.sqs.model.DeleteMessageRequest;
import com.amazonaws.services.sqs.model.ReceiveMessageRequest;

@RestController
@RequestMapping("/sqs")
public class SqsController {
	
	private static final Logger LOG = LoggerFactory.getLogger(SqsController.class);
	
	@Autowired
	private QueueMessagingTemplate queueMessagingTemplate;
	
	@Value("${url}")
	private String sqsEndPoint;
	
	private String message1 ="something to send";
	
	@GetMapping 
	public void sendMessage(){
		queueMessagingTemplate.send(sqsEndPoint, MessageBuilder.withPayload(message1).build());
		LOG.info("message sent to aws");

	}
	
//	@SqsListener("sqs") 
//	public void getMessage(Object message){
//		LOG.info("!!!! received message ", message);
//	}
	
	@Scheduled(fixedRate = 1000)
	public void getMessage() {
		final AmazonSQS sqs = AmazonSQSClientBuilder.defaultClient();
        while(true) {
        	LOG.info("Receiving messages from MyQueue.\n");
        	final ReceiveMessageRequest receiveMessageRequest =
                    new ReceiveMessageRequest(sqsEndPoint)
                    	.withMaxNumberOfMessages(1)
                    	.withWaitTimeSeconds(3);
	        final List<com.amazonaws.services.sqs.model.Message> messages = sqs.receiveMessage(receiveMessageRequest)
	                .getMessages();
	        for (final com.amazonaws.services.sqs.model.Message message : messages) {
	        	LOG.debug("Message");
	        	LOG.debug("  MessageId:     "
	                    + message.getMessageId());
	        	LOG.debug("  ReceiptHandle: "
	                    + message.getReceiptHandle());
	        	LOG.debug("  MD5OfBody:     "
	                    + message.getMD5OfBody());
	        	LOG.debug("  Body:          "
	                    + message.getBody());
	            if(!"".equals(message.getBody())) {
	            	LOG.info("Calling POST /notification to insert records into database");
		            RestTemplate rest = new RestTemplate();
		            ResponseEntity<String> companyInfoResponse = rest.postForEntity(notificationUrl, message.getBody(), String.class);
		            String s = companyInfoResponse.getBody();
		            
		            System.out.println("Deleting a message.\n");
		            final String messageReceiptHandle = messages.get(0).getReceiptHandle();
		            sqs.deleteMessage(new DeleteMessageRequest(sqsEndPoint,
		                    messageReceiptHandle));
		         }
	        }
        }
	}


}
