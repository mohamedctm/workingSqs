package com.aws.sqs.service;



import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;

import com.amazonaws.services.sqs.AmazonSQS;
import com.amazonaws.services.sqs.model.GetQueueUrlResult;
import com.amazonaws.services.sqs.model.ReceiveMessageResult;
import com.aws.sqs.client.SqsClient;

@Component
public class ReceiveMessage implements Runnable{
	
	private static final Logger LOG = LoggerFactory.getLogger(ReceiveMessage.class);
	
	
	private SqsClient client;
	
	private AmazonSQS client2;
	
	public ReceiveMessage(SqsClient client) {
		this.client = client;
		
	}
//	@Override
//	@Scheduled(fixedRate = 1000)
//	public void run() {
//		ReceiveMessageResult result = client.getSqsClient()
//				.receiveMessage(client.getUrl());
//		LOG.info("starting");
//
//		
//		LOG.info("start listening", result);
//		if(null == result)
//			LOG.info("Receive Message{}", result);
//		
//		if(null != result.getMessages() && !result.getMessages()
//				.isEmpty()) {
//			LOG.info("delete message", result.getMessages().get(0).getReceiptHandle());
//			client.getSqsClient().deleteMessage(client.getUrl(),
//					result.getMessages().get(0).getReceiptHandle());
//		}
//	}
//	@Override
//	@Scheduled(fixedRate = 1000)
	public void run() {
		GetQueueUrlResult url = client2.getQueueUrl("${url}");
		ReceiveMessageResult message = client2.receiveMessage(url.getQueueUrl());
		message.getMessages().forEach( m-> {
			LOG.info("message from q: "+m.getBody());
			LOG.info("time to delete"+m.getBody());
			client2.deleteMessage(url.getQueueUrl(), m.getReceiptHandle());
		});
	}
	
	
	
	
}
